<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://abyss4a.github.io</id>
    <title>小沐屋</title>
    <updated>2021-06-17T11:39:08.400Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://abyss4a.github.io"/>
    <link rel="self" href="https://abyss4a.github.io/atom.xml"/>
    <subtitle>Good good study,day day up!</subtitle>
    <logo>https://abyss4a.github.io/images/avatar.png</logo>
    <icon>https://abyss4a.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 小沐屋</rights>
    <entry>
        <title type="html"><![CDATA[SQL_TASK_2]]></title>
        <id>https://abyss4a.github.io/post/sql_task_2/</id>
        <link href="https://abyss4a.github.io/post/sql_task_2/">
        </link>
        <updated>2021-06-15T07:30:24.000Z</updated>
        <summary type="html"><![CDATA[<p>数据学习笔记TASK2</p>
]]></summary>
        <content type="html"><![CDATA[<p>数据学习笔记TASK2</p>
<!-- more -->
<p>本笔记为阿里云天池龙珠计划SQL训练营的学习内容，链接为：<a href="https://tianchi.aliyun.com/specials/promotion/aicampsql">https://tianchi.aliyun.com/specials/promotion/aicampsql</a></p>
<h3 id="select语句基础">SELECT语句基础</h3>
<h4 id="从表中选取数据">从表中选取数据</h4>
<p><strong>SELECT语句</strong><br>
从表中选取数据时需要使用SELECT语句，也就是只从表中选出（SELECT）必要数据的意思。通过SELECT语句查询并选取出必要的数据的过程称为匹配查询或者查询（query）<br>
基本SELECT语句包含了SELECT和FROM两个子句（clause）。示例如下：</p>
<pre><code class="language-SQL">SELECT &lt;列名&gt;,
FROM &lt;表名&gt;;
</code></pre>
<p>其中，SELECT子句中列举了希望从表中查询出的列的名称，而FROM子句则制定了选取出数据的标的名称</p>
<h4 id="从表中选取符合条件的数据">从表中选取符合条件的数据</h4>
<p><strong>WHERE语句</strong><br>
当不需要取出全部数据，而是选取出满足某些条件的数据时，使用WHERE语句<br>
SELECT语句通过WHERE子句来指定查询数据的条件。在WHERE子句中可以指定“某一列的值和这个字符串相等”或者“某一列的值大于这个数字”等条件。执行含有这些条件的SELECT语句，就可以查询出只符合条件的记录了</p>
<pre><code class="language-SQL">SELECT &lt;列名&gt;, ......
FROM &lt;表名&gt;
WHERE &lt;条件表达式&gt;;
</code></pre>
<h4 id="相关法则">相关法则</h4>
<ul>
<li>星号（*）代表全部列的意思</li>
<li>SQL中可以随意使用换行符，不影响语句执行（但不可插入空行）</li>
<li>设定汉语别名时需要使用双引号（&quot;）括起来</li>
<li>在SELECT语句中使用DISTINCT可以删除重复行</li>
<li>注释时SQL语句中用来表示说明或者注意事项的部分，分为1行注释&quot;--&quot;和多行注释两种&quot;/* */&quot;</li>
</ul>
<pre><code class="language-SQL">-- 想要查询出全部列时，可以使用代表所有列的星号（*）
SELECT *
FROM &lt;表名&gt;;
-- SQL语句可以使用AS关键字为列设定别名（用中文时需要双引号（&quot;&quot;））
SELECT &lt;列名&gt; AS lm,
       &lt;列名&gt; AS &quot;别名&quot;
FROM &lt;表名&gt;;
-- 使用DISTINCT删除重复数据
SELECT DISTINCT &lt;列名&gt;
FROM &lt;表名&gt;;
</code></pre>
<h3 id="算数运算符和比较运算符">算数运算符和比较运算符</h3>
<h4 id="算数运算符">算数运算符</h4>
<p>SQL语句中可以使用的四则运算的主要运算符如下：</p>
<table>
<thead>
<tr>
<th>含义</th>
<th>运算符</th>
</tr>
</thead>
<tbody>
<tr>
<td>加法</td>
<td>+</td>
</tr>
<tr>
<td>减法</td>
<td>-</td>
</tr>
<tr>
<td>乘法</td>
<td>*</td>
</tr>
<tr>
<td>除法</td>
<td>/</td>
</tr>
</tbody>
</table>
<h4 id="比较运算符">比较运算符</h4>
<table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>和~相等</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>和~不相等</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于~</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于~</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于~</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
</tbody>
</table>
<h4 id="常用法则">常用法则</h4>
<ul>
<li>SELECT子句中可以使用常数或者表达式</li>
<li>使用比较运算符时一定要注意不等号和等号的位置</li>
<li>字符串类型的数据原则上按照字典顺序进行排序，不能与数字的大小顺序混淆</li>
<li>希望选取NULL记录时，需要在条件表达式中使用IS NULL运算符。希望选取不是NULL的记录时，需要在表达式中使用IS NOT NULL运算符<br>
相关代码如下：</li>
</ul>
<pre><code class="language-SQL">-- SQL语句中也可以使用运算表达式
SELECT &lt;表达式&gt; 
FROM &lt;表名&gt;;
-- WHERE子句中的条件表达式中也可以使用计算表达式
SELECT &lt;列名&gt;
FROM &lt;表名&gt;
WHERE &lt;表达式&gt;;
/* 对字符串使用不等号
首先创建chars并插入数据
选取出大于'2'的SELECT语句*/
CTEATE TABLE chars
(chr CHAR(3) NOT NULL,
PRIMARY KEY (chr));
-- 选取出大于'2'的数据的SELECT语句('2'为字符串)
SELECT chr
FROM chars
WHERE chr &gt; '2';
-- 选取NULL的记录
SECECT &lt;列名&gt;
FROM &lt;表名&gt;
WHERE &lt;列名&gt; IS NULL;
-- 选取不为NULL的记录
SELECT &lt;列名&gt;
FROM &lt;表名&gt;
WHERE &lt;列名&gt; IS NOT NULL;
</code></pre>
<h3 id="逻辑运算符">逻辑运算符</h3>
<h4 id="not运算符">NOT运算符</h4>
<p>想要表达“不是......”时，除了前文的&lt;&gt;运算符外，还存在另外一个表示否定、适用范围更广的运算符：NOT<br>
NOT 不能单独使用，如下例：</p>
<pre><code class="language-SQL">-- 选取出单价大于1000元的记录
SELECT product_name, product_type, sale_price
FROM product
WHERE sale_price &gt;= 1000;
-- 向上述代码的查询条件中添加NOT运算符
SELECTproduct_name, product_type, sale_price
FROM product
WHERE NOT sale_price &gt;= 1000;
</code></pre>
<h4 id="and运算符和or运算符">AND运算符和OR运算符</h4>
<p>当希望同时使用多个查询条件时，可以使用AND 或者OR运算符<br>
AND相当于“并且”，类似数学中的取交集<br>
OR相当于“或者”，类似数学中的取并集<br>
如下图所示：<br>
AND运算符工作效果图<br>
<img src="https://abyss4a.github.io/post-images/1623756088705.png" alt="" loading="lazy"><br>
OR运算符工作效果图<br>
<img src="https://abyss4a.github.io/post-images/1623822500551.png" alt="" loading="lazy"></p>
<h4 id="通过括号优先处理">通过括号优先处理</h4>
<p><strong>AND运算符优先于OR运算符</strong></p>
<pre><code class="language-SQL">--通过括号让OR运算符先于AND运算符执行
SELECT &lt;列名&gt;
FROM &lt;表名&gt;
WHERE &lt;条件1&gt;
AND (&lt;条件2&gt;
OR &lt;条件3&gt;);
</code></pre>
<h4 id="真值表">真值表</h4>
<p>复杂运算时该怎样理解？<br>
当碰到条件较复杂的语句时，理解语句含义并不容易，这是可以采用真值表来梳理逻辑关系<br>
什么是真值？<br>
NOT、AND、和OR称为逻辑运算符，这里所说的逻辑就是对真值进行操作的意思。真值就是值为真（TRUE）或假（FALSE）其中之一的值<br>
<strong>AND 运算符</strong>：两侧的真值都为真时返回真，除此之外都返回假<br>
<strong>OR 运算符</strong>：两侧的真值只要有一个不为假就返回真，只有当其两侧的真值都为假时才返回假<br>
<strong>NOT运算符</strong>：只是单纯的将真转换为假，将假转换为真<br>
真值表<br>
<img src="https://abyss4a.github.io/post-images/1623824746976.png" alt="" loading="lazy"></p>
<h4 id="含有null时的真值">含有NULL时的真值</h4>
<p>NULL的真值结果既不为真，也不为假，因为并不知道到这样一个值<br>
那该如何表示呢？<br>
这时真值是除真假之外的第三种值——不确定（UNKNOWN）。一般的逻辑运算符并不存在这第三种值，SQL以外的语言也基本上只使用真和假这两种真值。与通常的逻辑运算被称为二值逻辑相对，只有SQL中的逻辑运算被称为三值逻辑<br>
三值逻辑下的AND和OR真值表为：<br>
<img src="https://abyss4a.github.io/post-images/1623825045545.png" alt="" loading="lazy"></p>
<h3 id="对表进行聚合查询">对表进行聚合查询</h3>
<h4 id="聚合函数">聚合函数</h4>
<p>SQL中用于汇总的函数叫做聚合函数，以下五个时最常用的聚合函数：</p>
<ul>
<li>COUNT：计算表中的记录数（行数）</li>
<li>SUM：计算表中数值列中数据的合计值</li>
<li>AVG：计算表中数值列中数据的平均值</li>
<li>MAX：求出表中任意列中数据的最大值</li>
<li>MIN：求出表中任意列中数据的最小值</li>
</ul>
<pre><code class="language-SQL">-- 计算全部数据的行数（包含NULL）
SELECT COUNT(*)
FROM &lt;表名&gt;;
-- 计算NULL以外数据的行数
SELECT COUNT(&lt;列名&gt;)
FROM &lt;表名&gt;;
-- 计算某一列的合计值
SELECT SUM(&lt;列名&gt;)
FROM &lt;表名&gt;;
-- 计算某一列的平均值
SELECT AVG(&lt;列名&gt;)
FROM &lt;表名&gt;;
-- MAX和MIN也可用于非数值型数据
SELECT MAX(DATE)
FROM &lt;表名&gt;;
</code></pre>
<h4 id="使用集合函数删除重复值">使用集合函数删除重复值</h4>
<pre><code class="language-SQL">-- 计算去除重复数据后的数据行数
SELECT COUNT(DISTINCT &lt;列名&gt;)
FROM &lt;表名&gt;；
</code></pre>
<h4 id="常用法则-2">常用法则</h4>
<ul>
<li>COUNT函数的结果根据参数的不同而不同。COUNT（*）会得到包含NULL的数据行数，而COUNT（&lt;列名&gt;）会得到NULL以外的数据行数</li>
<li>聚合函数会将NULL排除在外，但COUNT（*）例外，并不会排除NULL</li>
<li>MAX/MIN函数几乎适用于所有数据类型的列，SUM/AVG函数只适用于数值类型的列</li>
<li>想要计算值的种类时，可以在COUNT函数的参数中使用DISTINCT</li>
<li>在聚合函数的参数中使用DISTINCT，可以删除重复数据</li>
</ul>
<h3 id="对表进行分组">对表进行分组</h3>
<h4 id="group-by语句">GROUP BY语句</h4>
<p>之前使用聚合函数都是会整个表的数据进行处理，当你想进行分组汇总时（即：将现有的数据按照某列来汇总统计），GROUP BY 可以帮助你：</p>
<pre><code class="language-SQL">SELECT &lt;列名1&gt;,&lt;列名2&gt;,...
FROM &lt;表名&gt;
GROUP BY &lt;列名1&gt;,&lt;列名2&gt;,...;
</code></pre>
<p>GROUP BY  子句就像切蛋糕那样将表进行了分组，在GROUP BY 子句中指定的列称为聚合键或者分组列</p>
<h4 id="聚合键中包含null时">聚合键中包含NULL时</h4>
<p>会将NULL作为一组特殊数据进行处理</p>
<h4 id="group-by书写位置">GROUP BY书写位置</h4>
<p>GROUP BY的子句书写顺序有严格要求，不按要求会导致SQL无法正常执行，目前出现过的字句<strong>书写顺序</strong>为：<br>
<strong>1. SELECT→ 2.FROM→ 3.WHERE→ 4.GROUP BY</strong><br>
其中前三项用于筛选数据，GRROUP BY对筛选出的数据进行处理</p>
<h4 id="在where子句中使用group-by">在WHERE子句中使用GROUP BY</h4>
<pre><code class="language-SQL">SELECT &lt;列名&gt;
FROM &lt;表名&gt;
WHERE &lt;条件&gt;
GROUP BY &lt;列名&gt;;
</code></pre>
<h4 id="常见错误">常见错误</h4>
<p>在使用聚合函数及GROUP BY子句时，经常出现的错误有：</p>
<ul>
<li>在聚合函数的SELECT子句中写了聚合键以外的列，使用COUNT等聚合函数时，SELECT子句中如果出现列名只能时GROUP BY子句中指定的列名（也就是聚合键）</li>
<li>在GROUP BY子句中使用列的别名，SELECT子句中可以通过AS来指定别名，但在GROUP BY中不能使用别名，因为在DBMS中，SELECT子句在GROUP BY子句后执行</li>
<li>在WHERE中使用聚合函数，原因是聚合函数的使用前提是结果集已经确定，而WHERE还处于确定结果集的过程中，所以相互矛盾会引发错误，如果向指定条件，可以在SELECT，HAVING（下面马上会讲）以及ORDER BY子句中使用聚合函数</li>
</ul>
<h3 id="为聚合结果指定条件">为聚合结果指定条件</h3>
<h4 id="用having得到特定分组">用HAVING得到特定分组</h4>
<p>将表使用GROUP BY分组后，怎样才能只取出其中两组<br>
<img src="https://abyss4a.github.io/post-images/1623897900174.png" alt="" loading="lazy"><br>
这里WHERE不可行，因为WHERE子句只能指定记录（行）的条件，而不能用来指定组的条件（例如，“数据行数为2行”或者“平均值为500”等）<br>
可以在GROUP BY后使用HAVING子句<br>
HAVING的用法类似WHERE</p>
<h4 id="having特点">HAVING特点</h4>
<p>HAVING子句用于对分组进行过滤，可以使用数字，聚合函数和GROUP BY中指定的列名（聚合键）</p>
<pre><code class="language-SQL">-- 数字
SELECT &lt;列名&gt;， COUNT(*)
FROM &lt;表名&gt;
GROUP BY &lt;列名&gt;
HAVING COUNT(*) = 2;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQL_TASK_1]]></title>
        <id>https://abyss4a.github.io/post/sql_task_1/</id>
        <link href="https://abyss4a.github.io/post/sql_task_1/">
        </link>
        <updated>2021-06-12T08:11:23.000Z</updated>
        <summary type="html"><![CDATA[<p>数据学习笔记TASK1</p>
]]></summary>
        <content type="html"><![CDATA[<p>数据学习笔记TASK1</p>
<!-- more -->
<p>本笔记为阿里云天池龙珠计划SQL训练营的学习内容，链接为：<br>
<a href="https://tianchi.aliyun.com/specials/promotion/aicampsql">https://tianchi.aliyun.com/specials/promotion/aicampsql</a></p>
<h3 id="初识数据库">初识数据库</h3>
<p>数据库是将大量数据保存起来，通过计算机加工而成的可以 进行高效访问的数据集合。该数据集合称为数据库（Database，DB）。用来管理数据库的计算机系统称为数据库管理系统（Database Management System，DBMS）</p>
<h4 id="dbms的种类">DBMS的种类</h4>
<p>DBMS 主要通过数据的保存格式（数据库的种类）来进行分类，现阶段主要有以下 5 种类型</p>
<ul>
<li>层次数据库（Hierarchical Database，HDB）</li>
<li>关系数据库（Relational Database，RDB）</li>
</ul>
<p>这种类型的 DBMS 称为关系数据库管理系统（Relational Database Management System，RDBMS）。比较具有代表性的 RDBMS 有如下 5 种：</p>
<pre><code>Oracle Database：甲骨文公司的RDBMS
SQL Server：微软公司的RDBMS
DB2：IBM公司的RDBMS
PostgreSQL：开源的RDBMS
MySQL：开源的RDBMS
</code></pre>
<ul>
<li>面向对象数据库（Object Oriented Database，OODB）</li>
<li>XML数据库（XML Database，XMLDB）</li>
<li>键值存储系统（Key-Value Store，KVS），举例：MongoDB</li>
</ul>
<h4 id="rdbms的常见系统结构">RDBMS的常见系统结构</h4>
<p>使用 RDBMS 时，最常见的系统结构就是客户端 / 服务器类型（C/S类型）这种结构<br>
<img src="https://abyss4a.github.io/post-images/1623756208261.jpg" alt="" loading="lazy"></p>
<h4 id="数据库安装">数据库安装</h4>
<ul>
<li>阿里云MySQL服务器使用介绍<br>
<a href="http://tianchi-media.oss-cn-beijing.aliyuncs.com/dragonball/SQL/other/%E9%98%BF%E9%87%8C%E4%BA%91MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D.pdf">http://tianchi-media.oss-cn-beijing.aliyuncs.com/dragonball/SQL/other/阿里云MySQL服务器使用介绍.pdf</a><br>
优点： 操作使用方便，未来趋势（数据上云），导入、导出数据方便，运行速度快<br>
缺点： 需要付费购买，不过现在对开发者有优惠活动，基础版本 1核1G，存储空间20G的，目前优惠价半年只需9.9元，一杯奶茶钱不到</li>
<li>本地MySQL环境搭建方法介绍<br>
<a href="http://tianchi-media.oss-cn-beijing.aliyuncs.com/dragonball/SQL/other/%E6%9C%AC%E5%9C%B0MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D.pdf">http://tianchi-media.oss-cn-beijing.aliyuncs.com/dragonball/SQL/other/本地MySQL环境搭建方法介绍.pdf</a><br>
优点： 免费，增强动手能力<br>
缺点： 安装、配置麻烦，数据导入、导出耗时长</li>
</ul>
<h3 id="初识sql">初识SQL</h3>
<h4 id="概念介绍">概念介绍</h4>
<p>标准SQL语句可以分为以下三类</p>
<ul>
<li>DDL（Data Definition Language，数据定义语言）用来创建或删除存储数据用的数据库及数据库中的表等对象。DDL包含以下几种指令。
<ul>
<li>CREATE：创建数据库和表等对象</li>
<li>DROP：删除数据库和表等对象</li>
<li>ALTER：修改数据库和表等对象的结构</li>
</ul>
</li>
<li>DML（Data Manipulation Language，数据操纵语言）用来查询或者变更表中的记录。DML包含以下几种指令。
<ul>
<li>SELECT：查询表中的数据</li>
<li>INSERT：向表中插入新数据</li>
<li>UPDATE：更新表中的数据</li>
<li>DELETE：删除表中的数据</li>
</ul>
</li>
<li>DCL（Data Control Language，数据控制语言）用来确认或者取消对数据库中的数据进行的更改。除此之外，还可以对RDBMS的用户是否有权限操作数据库中的对象（数据库表等）进行设定。DCL包含以下几种指令。
<ul>
<li>COMMIT：确认对数据库中的数据进行的变更</li>
<li>ROLLBACK：取消对数据库中的数据进行的变更</li>
<li>GRANT：赋予用户操作权限</li>
<li>REVOKE：取消用户的操作权限<br>
实际使用的SQL语句当中有90%属于DML。</li>
</ul>
</li>
</ul>
<h4 id="sql的基本书写规则">SQL的基本书写规则</h4>
<ul>
<li>SQL语句要以分号（;）结尾</li>
<li>SQL不区分关键字的大小写，但是插入到表中的数据是区分大小写的</li>
<li>win系统默认不区分表名及字段名的大小写</li>
<li>linux/mac默认严格区分表名及字段名的大小写</li>
<li>建议统一表名及字段名大小写格式</li>
<li>常数的书写方式是固定的<br>
'abc'，1234，'26 Jan 2010'，'10/01/26'，'2010-01-26'</li>
<li>单词需要用半角空格或者换行来分割<br>
SQL语句的单词之间需使用半角空格或者换行符来进行分割，且不能使用全角空格作为单词的分隔符，否则会发生错误，出现无法预期的结果。</li>
</ul>
<blockquote>
<p>《附录1 - SQL语法规范》待补充</p>
</blockquote>
<h4 id="数据库的创建create-databass语句">数据库的创建（CREATE DATABASS语句）</h4>
<p>语法：</p>
<pre><code class="language-SQL">CREATE DATABASE &lt;数据库名称&gt;;
</code></pre>
<h4 id="表的创建create-table语句">表的创建（CREATE TABLE语句）</h4>
<p>语法：</p>
<pre><code class="language-SQL">CREATE TABLE&lt;表名&gt;
(&lt;列名1&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;,
 &lt;列名2&gt; &lt;数据类型&gt; &lt;该列所需约束&gt;,
 .
 .
 &lt;该表的约束1&gt;, &lt;该表的约束2&gt;,...);
</code></pre>
<h4 id="命名规则">命名规则</h4>
<ul>
<li>只能使用半角英文字母、数字、下划线（_）作为数据库、表和列的名称</li>
<li>名称必须使用半角英文字母开头<br>
例：</li>
</ul>
<table>
<thead>
<tr>
<th>列名</th>
<th>定义列名</th>
</tr>
</thead>
<tbody>
<tr>
<td>商品编号</td>
<td>product_id</td>
</tr>
<tr>
<td>商品名称</td>
<td>product_name</td>
</tr>
</tbody>
</table>
<h4 id="数据库类型的指定">数据库类型的指定</h4>
<p>数据库创建的表，所有的列都必须指定数据类型，每一列都不能存储与该列数据类型不符的数据<br>
四种最基本的数据类型</p>
<ul>
<li>INTEGER型<br>
用来指定存储整数的列的数据类型（数字型），不能存储小数</li>
<li>CHAR型<br>
用来存储长字符串，当列中存储的字符串长度达不到最大长度的时候，使用半角空格进行补足，由于会浪费存储空间，所以一般不使用</li>
<li>VARCHAR型<br>
用来存储可变长度字符串，字符数未达到最大长度，也不会用半角空格补足</li>
<li>DATE型<br>
用来指定存储日期（年月日）的列的数据类型（日期型）</li>
</ul>
<h4 id="约束的设置">约束的设置</h4>
<p>约束是除了数据类型之外，对列中存储的数据类型进行限制或者追加条件的功能<br>
<code>NOT NULL</code>是非空约束，即该列必须输入数据<br>
<code>PRIMARY KEY</code>是主键约束，代表该列是唯一值，可以通过该列取出特定的行的数据</p>
<h4 id="表的删除和更新">表的删除和更新</h4>
<ul>
<li>删除表的语法：</li>
</ul>
<pre><code class="language-SQL">DROP TABLE &lt;表名&gt;;
</code></pre>
<p>需要特别注意的是，删除的表是无法恢复的，只能重新插入，请执行删除操作时无比要谨慎</p>
<ul>
<li>添加列的 ALTER TABLE 语句</li>
</ul>
<pre><code class="language-SQL">ALTER TABLE &lt;表名&gt; ADD COLUMN &lt;列的定义&gt;；
</code></pre>
<ul>
<li>删除列的 ALTER TABLE 语句</li>
</ul>
<pre><code class="language-SQL">ALTER TABLE &lt;表名&gt; DROP COLUMN &lt;列名&gt;;
</code></pre>
<p>ALTER TABLE 语句和 DROP TABLE 语句一样，执行之后无法恢复。误添的列可通过ALTER TABLE 语句删除，或者将表全部删除之后重新再创建<br>
【拓展内容】</p>
<ul>
<li>清空表内容</li>
</ul>
<pre><code class="language-SQL">TRUNCATE TABLE TABLE_NAME;
</code></pre>
<p>优点：相比<code>drop/delete</code>，<code>truncate</code>用来清除数据时，速度最快</p>
<ul>
<li>数据的更新<br>
基本语法：</li>
</ul>
<pre><code class="language-SQL">UPDATE &lt;表名&gt;
SET &lt;列名&gt; = &lt;表达式&gt; [, &lt;列名2&gt;=&lt;表达式2&gt;...];
WHERE &lt;条件&gt;;  -- 可选，非常重要
ORDER BY 子句;  --可选
LIMIT 子句;  --可选
</code></pre>
<p><strong>使用update时要注意添加where条件，否则将会将所有的行按照语句修改</strong><br>
使用UPDATE也可以将列更新为NULL（该更新俗称NULL清空）。此时只需要将赋值表达式右边的值直接写为NULL即可<br>
和INSERT语句一样，UPDATE语句也可以将NULL作为一个值来使用<br>
<strong>但是，只有未设置 NOT NULL 约束和主键约束的列才可以清空为NULL</strong><br>
如果设置了上述约束的列更新为NULL，就会出错，这点与INSERT语句相同</p>
<ul>
<li>多列更新<br>
UPDATE语句的SET子句支持同时将多个列作为更新对象</li>
</ul>
<pre><code class="language-SQL">UPDATE &lt;表名&gt;
SET &lt;列名1&gt; = &lt;表达式1&gt;,
    &lt;列名2&gt; = &lt;表达式2&gt;
WHERE &lt;条件&gt;;
</code></pre>
<p>需要明确的是，SET子句中的列不仅可以是两列，还可以是三列或者更多</p>
<ul>
<li>向表中插入数据<br>
基本语法：</li>
</ul>
<pre><code class="language-SQL">INSERT INTO &lt;表名&gt; (列1,列2, ...) VALUES (值1,值2, ...);
</code></pre>
<p>对表进行全列INSERT时，可以省略表名后的列清单。这时VALUES子句的值会么人按照从左到右的顺序赋给每一列</p>
<pre><code class="language-SQL">INSERT INTO &lt;表名&gt; VALUES (值1,值2, ...);
</code></pre>
<p>原则上，执行一次INSERT语句会插入一行数据。插入多时，通常需要循环执行相应次数的INSERT语句。其实很多RDBMS都支持一次插入多行数据</p>
<pre><code class="language-SQL">-- 多行INSERT（DB2、SQL、SQL Server、PostgreSQL和MySQL多行插入）
INSERT INTO &lt;表名&gt; VALUES (值1,值2, ...),
(值1,值2, ...),
(值1,值2, ...);
-- Oracle中的多行INSERT
INSERT ALL INTO &lt;表名&gt; VALUES (值1,值2, ...)
INTO &lt;表名&gt; VALUES (值1,值2, ...)
INTO &lt;表名&gt; VALUES (值1,值2, ...)
SELECT * FROM DUAL;
-- DUAL是Oracle特有的一种临时表A。因此“SELECT * FROM DUAL”部分也只是临时性的，并没有实际意义
</code></pre>
<p>INSERT语句中想给某一列赋予NULL值时，可以直接在VALUES子句的值清单中写入NULL，想要插入NULL的列一定不能设置NOT NULL约束<br>
还可以向表中插入默认值（初始值），可以通过在创建表的CREATE TABLE语句中设置DEFAULT约束来设定默认值<br>
可以使用INSERT ... SELECT语句从其他表复制数据</p>
<pre><code class="language-SQL">INSERT INTO &lt;表名&gt; (列1,列2, ...)
SELECT 列1,列2, ...
FROM &lt;表名&gt;
</code></pre>
]]></content>
    </entry>
</feed>